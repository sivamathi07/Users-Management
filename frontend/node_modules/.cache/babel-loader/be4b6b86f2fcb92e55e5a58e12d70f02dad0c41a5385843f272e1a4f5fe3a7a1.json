{"ast":null,"code":"import axios from \"axios\";\nclass UserService {\n  // update employee task\n  static async updateEmployeeTask(taskId, taskData, token) {\n    try {\n      const response = await axios.put(`${UserService.BASE_URL}/tasks/${taskId}`, taskData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  //newly created url mapping based on userID fetch the employee task\n  static async fetchEmployeeTasksByuserId(token, userId) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/tasks/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async login(email, password) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/auth/login`, {\n        email,\n        password\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // Admin login anytime\n\n  static async register(userData, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/auth/register`, userData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getAllUsers(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/admin/get-all-users`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getYourProfile(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/adminuser/get-profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getUserById(userId, token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/admin/get-users/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async deleteUser(userId, token) {\n    try {\n      const response = await axios.delete(`${UserService.BASE_URL}/admin/delete/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async updateUser(userId, userData, token) {\n    try {\n      const response = await axios.put(`${UserService.BASE_URL}/admin/update/${userId}`, userData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async fetchEmployeeTasks(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/tasks`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async createEmployeeTask(taskData, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/tasks`, taskData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async setTaskDates(taskId, startDate, endDate, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/tasks/${taskId}/dates`, {\n        startDate,\n        endDate\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async approveEmployeeTask(taskId, token) {\n    // approve button\n    try {\n      const response = await axios.put(`${UserService.BASE_URL}/tasks/${taskId}/approve`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**AUTHENTICATION CHECKER */\n  static logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  }\n  static isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n  static isAdmin() {\n    const role = localStorage.getItem('role');\n    return role === 'ADMIN';\n  }\n  static isUser() {\n    const role = localStorage.getItem('role');\n    return role === 'USER';\n  }\n  static adminOnly() {\n    return this.isAuthenticated() && this.isAdmin();\n  }\n}\nUserService.BASE_URL = \"http://43.204.211.107:1010\";\nexport default UserService;","map":{"version":3,"names":["axios","UserService","updateEmployeeTask","taskId","taskData","token","response","put","BASE_URL","headers","Authorization","data","err","fetchEmployeeTasksByuserId","userId","get","login","email","password","post","register","userData","getAllUsers","getYourProfile","getUserById","deleteUser","delete","updateUser","fetchEmployeeTasks","createEmployeeTask","setTaskDates","startDate","endDate","approveEmployeeTask","logout","localStorage","removeItem","isAuthenticated","getItem","isAdmin","role","isUser","adminOnly"],"sources":["D:/Full Stack Project/Aura project/Aura Harks/Aura Harks/frontend/src/components/service/UserService.js"],"sourcesContent":["import axios from \"axios\";\n\nclass UserService{\n    static BASE_URL = \"http://43.204.211.107:1010\"\n\n    // update employee task\n    static async updateEmployeeTask(taskId, taskData, token) {\n        try {\n            const response = await axios.put(\n                `${UserService.BASE_URL}/tasks/${taskId}`,\n                taskData,\n                {\n                    headers: { Authorization: `Bearer ${token}` }\n                }\n            );\n            return response.data;\n        } catch (err) {\n            throw err;\n        }\n    }\n    \n\n      //newly created url mapping based on userID fetch the employee task\n      static async fetchEmployeeTasksByuserId(token, userId) {\n        try{\n          const response = await axios.get(`${UserService.BASE_URL}/tasks/${userId}`,{\n            headers: {Authorization: `Bearer ${token}`}\n        });\n        return response.data;\n          } catch(err) {\n              throw err;\n          }\n      }\n\n    static async login(email, password){\n        try{\n            const response = await axios.post(`${UserService.BASE_URL}/auth/login`, {email, password})\n            return response.data;\n\n        }catch(err){\n            throw err;\n        }\n    }\n    \n    // Admin login anytime\n   \n\n\n    static async register(userData, token){\n        try{\n            const response = await axios.post(`${UserService.BASE_URL}/auth/register`, userData, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n    static async getAllUsers(token){\n        try{\n            const response = await axios.get(`${UserService.BASE_URL}/admin/get-all-users`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n\n    static async getYourProfile(token){\n        try{\n            const response = await axios.get(`${UserService.BASE_URL}/adminuser/get-profile`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n    static async getUserById(userId, token){\n        try{\n            const response = await axios.get(`${UserService.BASE_URL}/admin/get-users/${userId}`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n    static async deleteUser(userId, token){\n        try{\n            const response = await axios.delete(`${UserService.BASE_URL}/admin/delete/${userId}`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n\n    static async updateUser(userId, userData, token){\n        try{\n            const response = await axios.put(`${UserService.BASE_URL}/admin/update/${userId}`, userData,\n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n   static async fetchEmployeeTasks(token) {\n    try {\n      const response = await axios.get(\n        `${UserService.BASE_URL}/tasks`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async createEmployeeTask(taskData, token) {\n    try {\n      const response = await axios.post(\n        `${UserService.BASE_URL}/tasks`,\n        taskData,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\nstatic async setTaskDates(taskId, startDate, endDate, token) {\n    try {\n      const response = await axios.post(\n        `${UserService.BASE_URL}/tasks/${taskId}/dates`,\n        { startDate, endDate },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n\n  static async approveEmployeeTask(taskId, token) { // approve button\n    try {\n        const response = await axios.put(\n            `${UserService.BASE_URL}/tasks/${taskId}/approve`,\n            {},\n            {\n                headers: { Authorization: `Bearer ${token}` }\n            }\n        );\n        return response.data;\n    } catch (err) {\n        throw err;\n    }\n}\n\n\n    /**AUTHENTICATION CHECKER */\n    static logout(){\n        localStorage.removeItem('token')\n        localStorage.removeItem('role')\n    }\n\n    static isAuthenticated(){\n        const token = localStorage.getItem('token')\n        return !!token\n    }\n\n    static isAdmin(){\n        const role = localStorage.getItem('role')\n        return role === 'ADMIN'\n    }\n\n    static isUser(){\n        const role = localStorage.getItem('role')\n        return role === 'USER'\n    }\n\n    static adminOnly(){\n        return this.isAuthenticated() && this.isAdmin();\n    }\n\n}\n\nexport default UserService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}