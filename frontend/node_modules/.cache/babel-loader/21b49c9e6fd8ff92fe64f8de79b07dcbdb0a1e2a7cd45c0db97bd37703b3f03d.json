{"ast":null,"code":"import axios from \"axios\";\nclass UserService {\n  //newly created url mapping based on userID fetch the employee task\n  static async fetchEmployeeTasksByuserId(token, userId) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/tasks/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async login(email, password) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/auth/login`, {\n        email,\n        password\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // Admin login anytime\n\n  static async register(userData, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/auth/register`, userData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getAllUsers(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/admin/get-all-users`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getYourProfile(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/adminuser/get-profile`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getUserById(userId, token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/admin/get-users/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async deleteUser(userId, token) {\n    try {\n      const response = await axios.delete(`${UserService.BASE_URL}/admin/delete/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async updateUser(userId, userData, token) {\n    try {\n      const response = await axios.put(`${UserService.BASE_URL}/admin/update/${userId}`, userData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async fetchTimesheets(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/api/timesheets`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async createTimesheet(timesheetData, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/api/timesheets`, timesheetData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async fetchEmployeeTasks(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/tasks`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async createEmployeeTask(taskData, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/tasks`, taskData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async setTaskDates(taskId, startDate, endDate, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/tasks/${taskId}/dates`, {\n        startDate,\n        endDate\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async approveEmployeeTask(taskId, token) {\n    // approve button\n    try {\n      const response = await axios.put(`${UserService.BASE_URL}/tasks/${taskId}/approve`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**AUTHENTICATION CHECKER */\n  static logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  }\n  static isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n  static isAdmin() {\n    const role = localStorage.getItem('role');\n    return role === 'ADMIN';\n  }\n  static isUser() {\n    const role = localStorage.getItem('role');\n    return role === 'USER';\n  }\n  static adminOnly() {\n    return this.isAuthenticated() && this.isAdmin();\n  }\n}\nUserService.BASE_URL = \"http://localhost:1010\";\nexport default UserService;","map":{"version":3,"names":["axios","UserService","fetchEmployeeTasksByuserId","token","userId","response","get","BASE_URL","headers","Authorization","data","err","login","email","password","post","register","userData","getAllUsers","getYourProfile","getUserById","deleteUser","delete","updateUser","put","fetchTimesheets","createTimesheet","timesheetData","fetchEmployeeTasks","createEmployeeTask","taskData","setTaskDates","taskId","startDate","endDate","approveEmployeeTask","logout","localStorage","removeItem","isAuthenticated","getItem","isAdmin","role","isUser","adminOnly"],"sources":["D:/Full Stack Project/Aura project/Aura Harks/Aura Harks/frontend/src/components/service/UserService.js"],"sourcesContent":["import axios from \"axios\";\n\nclass UserService{\n    static BASE_URL = \"http://localhost:1010\"\n\n      //newly created url mapping based on userID fetch the employee task\n      static async fetchEmployeeTasksByuserId(token, userId) {\n        try{\n          const response = await axios.get(`${UserService.BASE_URL}/tasks/${userId}`,{\n            headers: {Authorization: `Bearer ${token}`}\n        });\n        return response.data;\n          } catch(err) {\n              throw err;\n          }\n      }\n\n    static async login(email, password){\n        try{\n            const response = await axios.post(`${UserService.BASE_URL}/auth/login`, {email, password})\n            return response.data;\n\n        }catch(err){\n            throw err;\n        }\n    }\n    \n    // Admin login anytime\n   \n\n\n    static async register(userData, token){\n        try{\n            const response = await axios.post(`${UserService.BASE_URL}/auth/register`, userData, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n    static async getAllUsers(token){\n        try{\n            const response = await axios.get(`${UserService.BASE_URL}/admin/get-all-users`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n\n    static async getYourProfile(token){\n        try{\n            const response = await axios.get(`${UserService.BASE_URL}/adminuser/get-profile`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n    static async getUserById(userId, token){\n        try{\n            const response = await axios.get(`${UserService.BASE_URL}/admin/get-users/${userId}`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n    static async deleteUser(userId, token){\n        try{\n            const response = await axios.delete(`${UserService.BASE_URL}/admin/delete/${userId}`, \n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n\n    static async updateUser(userId, userData, token){\n        try{\n            const response = await axios.put(`${UserService.BASE_URL}/admin/update/${userId}`, userData,\n            {\n                headers: {Authorization: `Bearer ${token}`}\n            })\n            return response.data;\n        }catch(err){\n            throw err;\n        }\n    }\n\n        static async fetchTimesheets(token) {\n    try {\n      const response = await axios.get(`${UserService.BASE_URL}/api/timesheets`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async createTimesheet(timesheetData, token) {\n    try {\n      const response = await axios.post(`${UserService.BASE_URL}/api/timesheets`, timesheetData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n\n   static async fetchEmployeeTasks(token) {\n    try {\n      const response = await axios.get(\n        `${UserService.BASE_URL}/tasks`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static async createEmployeeTask(taskData, token) {\n    try {\n      const response = await axios.post(\n        `${UserService.BASE_URL}/tasks`,\n        taskData,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\nstatic async setTaskDates(taskId, startDate, endDate, token) {\n    try {\n      const response = await axios.post(\n        `${UserService.BASE_URL}/tasks/${taskId}/dates`,\n        { startDate, endDate },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n\n  static async approveEmployeeTask(taskId, token) { // approve button\n    try {\n        const response = await axios.put(\n            `${UserService.BASE_URL}/tasks/${taskId}/approve`,\n            {},\n            {\n                headers: { Authorization: `Bearer ${token}` }\n            }\n        );\n        return response.data;\n    } catch (err) {\n        throw err;\n    }\n}\n\n\n    /**AUTHENTICATION CHECKER */\n    static logout(){\n        localStorage.removeItem('token')\n        localStorage.removeItem('role')\n    }\n\n    static isAuthenticated(){\n        const token = localStorage.getItem('token')\n        return !!token\n    }\n\n    static isAdmin(){\n        const role = localStorage.getItem('role')\n        return role === 'ADMIN'\n    }\n\n    static isUser(){\n        const role = localStorage.getItem('role')\n        return role === 'USER'\n    }\n\n    static adminOnly(){\n        return this.isAuthenticated() && this.isAdmin();\n    }\n\n}\n\nexport default UserService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}